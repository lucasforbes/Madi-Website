# name: Deploy to EC2

# on:
#   push:
#     branches: [ main ]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       # Build + push backend
#       - name: Build and push Backend
#         uses: docker/build-push-action@v6
#         with:
#           context: ./backend
#           push: true
#           tags: ${{ secrets.DOCKERHUB_USERNAME }}/madi-backend:latest

#       # Build + push storefront
#       - name: Build and push Storefront
#         uses: docker/build-push-action@v6
#         with:
#           context: ./storefront
#           push: true
#           tags: ${{ secrets.DOCKERHUB_USERNAME }}/madi-storefront:latest

#       # Deploy to EC2
#       - name: Deploy to EC2
#         uses: appleboy/ssh-action@v1.0.3
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.EC2_PRIVATE_KEY }}
#           script: |
#             set -euo pipefail

#             cd ~/Madi-Website || { echo "Repo folder not found"; exit 1; }
#             git pull

#             # Write backend env (adjust to your real secrets)
#             cat > ./backend/.env <<'EOF'
#             DATABASE_URL=${{ secrets.DATABASE_URL }}
#             REDIS_URL=${{ secrets.REDIS_URL }}
#             STORE_CORS=${{ secrets.STORE_CORS }}
#             ADMIN_CORS=${{ secrets.ADMIN_CORS }}
#             AUTH_CORS=${{ secrets.AUTH_CORS }}
#             JWT_SECRET=${{ secrets.JWT_SECRET }}
#             COOKIE_SECRET=${{ secrets.COOKIE_SECRET }}
#             PORT=9000
#             STRIPE_API_KEY=${{ secrets.STRIPE_API_KEY }}
#             MEDUSA_LOG_LEVEL=info
#             EOF

#             # Write storefront env
#             cat > ./storefront/.env.production <<'EOF'
#             NEXT_PUBLIC_MEDUSA_BACKEND_URL=${{ secrets.NEXT_PUBLIC_MEDUSA_BACKEND_URL }}
#             MEDUSA_BACKEND_URL=${{ secrets.NEXT_PUBLIC_MEDUSA_BACKEND_URL }}
#             NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY }}
#             # (Optional) NEXT_PUBLIC_BASE_URL=https://your-domain.com
#             EOF

#             # No admin anymore â€” remove any old file if it exists
#             rm -f ./admin/.env || true

#             # Pull latest images and restart
#             docker compose pull
#             docker compose up -d

#             # Show status
#             docker compose ps